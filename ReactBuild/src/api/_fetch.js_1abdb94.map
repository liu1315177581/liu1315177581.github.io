{"version":3,"sources":["/src/api/_fetch.es6"],"names":[],"mappings":";;;;;;;;;;;;QAIO,cAAc;;oBACG,MAAM;;uBACD,WAAW;;qBACzB;;;;;;;AAOX,OAAG,eAAC,GAAG,EAAO,KAAK,EAAO,EAAE,EAAE;YAA1B,GAAG,gBAAH,GAAG,GAAG,EAAE;YAAE,KAAK,gBAAL,KAAK,GAAG,EAAE;;AACpB,YAAI,GAAG,EAAE;AACL,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,qBAAK,CACD,2BAAa,GAAG,EAAE,KAAK,CAAC,CAC3B,CAAC,IAAI,CACF,UAAC,GAAG,EAAK;AACL,wBAAI,GAAG,CAAC,EAAE,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,2BAAO,MAAM,CACT;AACI,2BAAG,EAAE,GAAG,CAAC,GAAG;AACZ,8BAAM,EAAE,GAAG,CAAC,MAAM;AAClB,kCAAU,EAAE,GAAG,CAAC,UAAU;qBAC7B,CACJ,CAAC;iBACL,CACJ,CAAC,IAAI,CACF,UAAC,GAAG;2BAAK,OAAO,CAAC,GAAG,CAAC;iBAAA,CACxB;aACJ,CAAC,CAAC;SACN;AACD,sBAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;KAC7B;;;;;;;;AASD,QAAI,gBAAC,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;AACjB,YAAI,GAAG,EAAE;AACL,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,qBAAK,CACD,2BAAa,GAAG,EAAE,KAAK,CAAC,EACxB;AACI,0BAAM,EAAE,MAAM;iBACjB,CACJ,CAAC,IAAI,CACF,UAAC,GAAG,EAAK;AACL,wBAAI,GAAG,CAAC,EAAE,EAAE,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;AAC9B,2BAAO,MAAM,CACT;AACI,2BAAG,EAAE,GAAG,CAAC,GAAG;AACZ,8BAAM,EAAE,GAAG,CAAC,MAAM;AAClB,kCAAU,EAAE,GAAG,CAAC,UAAU;qBAC7B,CACJ,CAAC;iBACL,CACJ,CAAC,IAAI,CACF,UAAC,GAAG;2BAAK,OAAO,CAAC,GAAG,CAAC;iBAAA,CACxB;aACJ,CAAC,CAAC;SACN;AACD,sBAAQ,KAAK,CAAC,UAAU,CAAC,CAAC;KAC7B;;;;;;;;AASD,SAAK,iBAAC,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,EAErB;CACJ","file":"/src/api/_fetch.es6","sourcesContent":["/**\r\n * @module _fetch\r\n * @author 小虎牙\r\n */\r\nimport 'whatwg-fetch';\r\nimport { message } from 'antd';\r\nimport { addTimeStamp } from '/src/util';\r\nexport default {\r\n    /**\r\n     * @method get 请求\r\n     * @param  String:   url\r\n     * @param  String:   param\r\n     * @param  Function: cb\r\n     */\r\n    get(url = '', param = '', cb) {\r\n        if (url) {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(\r\n                    addTimeStamp(url, param)\r\n                ).then(\r\n                    (res) => {\r\n                        if (res.ok) return res.json();\r\n                        return reject(\r\n                            {\r\n                                url: res.url, \r\n                                status: res.status, \r\n                                statusText: res.statusText\r\n                            }\r\n                        );\r\n                    }\r\n                ).then(\r\n                    (res) => resolve(res)\r\n                )\r\n            });\r\n        }\r\n        message.error('miss url');\r\n    },\r\n\r\n    \r\n    /**\r\n     * @method post 请求\r\n     * @param  String:   url\r\n     * @param  String:   param\r\n     * @param  Function: cb\r\n     */\r\n    post(url, param, cb) {\r\n        if (url) {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(\r\n                    addTimeStamp(url, param),\r\n                    {\r\n                        method: 'POST'\r\n                    }\r\n                ).then(\r\n                    (res) => {\r\n                        if (res.ok) return res.json();\r\n                        return reject(\r\n                            {\r\n                                url: res.url, \r\n                                status: res.status, \r\n                                statusText: res.statusText\r\n                            }\r\n                        );\r\n                    }\r\n                ).then(\r\n                    (res) => resolve(res)\r\n                )\r\n            });\r\n        }\r\n        message.error('miss url');\r\n    },\r\n\r\n\r\n    /**\r\n     * @method jsonp 请求\r\n     * @param  String:   url\r\n     * @param  String:   param\r\n     * @param  Function: cb\r\n     */\r\n    jsonp(url, param, cb) {\r\n\r\n    }\r\n};"]}